[{"title":"Create a Dockerfile with Python 3.7, PyGit2, and MongoDB","date":"2019-04-24T07:45:19.000Z","path":"2019/04/24/Create-a-Dockerfile-with-Python-3-7-PyGit2-and-MongoDB/","text":"Create a Dockerfile with Python 3.7, PyGit2, and MongoDB In this post, a new Dockerfile is created to build a Docker Image with Python 3.7, PyGit2, and MongoDB. The base image is amazonlinux. Python 3.7To install Python 3.7, it’s simple, just get the default packages. 1yum -y install python3 python3-devel PyGit2For PyGit2, there are not prebuilt packages for its dependency libgit2. It has to be built from source. The CI scripts of libgit2 are good resource for building, but they are supposed on debian or ubuntu using apt. 1https://github.com/libgit2/libgit2/blob/master/ci/setup-linux.sh The converted commands are as following: 12345678910111213141516yum -y updateyum -y install tar gzip make automake gcc gcc-c++ kernel-devel cmake openssl-devel libssh2-devel libcurl-devel git wgetcd /root &amp;&amp; \\ git clone --depth 10 --single-branch --branch mbedtls-2.6.1 https://github.com/ARMmbed/mbedtls.git mbedtls &amp;&amp; \\ cd mbedtls &amp;&amp; \\ CFLAGS=-fPIC cmake -DENABLE_PROGRAMS=OFF -DENABLE_TESTING=OFF -DUSE_SHARED_MBEDTLS_LIBRARY=OFF -DUSE_STATIC_MBEDTLS_LIBRARY=ON . &amp;&amp; \\ cmake --build . &amp;&amp; \\ make install cd /root &amp;&amp; \\ wget https://github.com/libgit2/libgit2/archive/v0.27.8.tar.gz &amp;&amp; \\ tar xvf v0.27.8.tar.gz &amp;&amp; \\ cd libgit2-0.27.8 &amp;&amp; \\ cmake . &amp;&amp; \\ make &amp;&amp; \\ make install After that, install PyGit2 with pip. 1234pip3 install cffipip3 install pygit2echo /usr/local/lib &gt; /etc/ld.so.conf.d/libgit2.confldconfig mongodbDownload the latest version from MongoDB official website and extract it. That’s all for this. 123cd /root &amp;&amp; \\ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-amazon2-4.0.6.tgz &amp;&amp; \\ tar xvf mongodb-linux-x86_64-amazon2-4.0.6.tgz Complete Dockerfile12345678910111213141516171819202122232425262728293031323334FROM amazonlinux:latestRUN yum -y updateRUN yum -y install tar gzip make automake gcc gcc-c++ kernel-devel cmake openssl-devel libssh2-devel libcurl-devel git wgetRUN cd /root &amp;&amp; \\ git clone --depth 10 --single-branch --branch mbedtls-2.6.1 https://github.com/ARMmbed/mbedtls.git mbedtls &amp;&amp; \\ cd mbedtls &amp;&amp; \\ CFLAGS=-fPIC cmake -DENABLE_PROGRAMS=OFF -DENABLE_TESTING=OFF -DUSE_SHARED_MBEDTLS_LIBRARY=OFF -DUSE_STATIC_MBEDTLS_LIBRARY=ON . &amp;&amp; \\ cmake --build . &amp;&amp; \\ make installRUN cd /root &amp;&amp; \\ wget https://github.com/libgit2/libgit2/archive/v0.27.8.tar.gz &amp;&amp; \\ tar xvf v0.27.8.tar.gz &amp;&amp; \\ cd libgit2-0.27.8 &amp;&amp; \\ cmake . &amp;&amp; \\ make &amp;&amp; \\ make installRUN yum -y install python3 python3-develRUN pip3 install cffiRUN pip3 install pygit2RUN echo /usr/local/lib &gt; /etc/ld.so.conf.d/libgit2.confRUN ldconfigRUN python3 -c &apos;import pygit2&apos;RUN cd /root &amp;&amp; \\ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-amazon2-4.0.6.tgz &amp;&amp; \\ tar xvf mongodb-linux-x86_64-amazon2-4.0.6.tgzRUN mkdir /root/dataEXPOSE 27017COPY entrypoint.sh /root/entrypoint.shENTRYPOINT [ &quot;/bin/bash&quot;, &quot;/root/entrypoint.sh&quot;] entrypoint.sh12345#!/bin/bash/root/mongodb-linux-x86_64-amazon2-4.0.6/bin/mongod --bind_ip_all --dbpath /root/data --fork --logpath /var/log/mongo.logexec $1","tags":[]},{"title":"Deploy a Web App Built with Laravel+Node.JS+Redis on Android Termux","date":"2019-03-19T11:44:19.000Z","path":"2019/03/19/Deploy-a-Web-App-Built-with-Laravel-Node-JS-Redis-on-Android-Termux/","text":"In this post, the steps to deploy a Web App built with Laravel+Node.JS+Redis on Android Termux environment are described. Table of Contents The Web App to deploy Install termux.app Install packages in termux System Info Utility packages SSH Start SSH server Use puttygen.exe to generate key files Add public key to ~/.ssh/autherized_keys Use putty.exe to login proot Git (optional) Python (optional) clang (optional) redis node.js PHP Nginx php-fpm Configuration Update /etc/nginx/nginx.conf Update /etc/php-fpm.d/www.conf node modules Laravel Startup script Visit the app references The Web App to deployThe web app is built with PHP/Laravel, node.js and redis. The code will be deployed in $HOME/firstchart. https://drive.google.com/file/d/1IUFCGSBIXxbmRrx_neX9PDLcM4C_Ctak/view?usp=sharing https://github.com/maximus1127/neweyechart Install termux.appGet and install the APK from Google Play or F-Droid. You can get the links from the website. https://termux.com/ Install packages in termuxAfter starting termux app, you can run commands in the terminal. System Info1234whoami # the user name in useifconfig # find the IP address Utility packages Package wget and curl are used to download files from HTTP servers. Package vim is a editor. 1pkg install wget curl vim SSH1pkg install sshd Start SSH server1sshd The SSH server in termux can only be logged in with a key files. Go to https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html and get putty.exe &amp; puttygen.exe. putty.exe: a SSH client puttygen.exe: a RSA and DSA key generation utility Use puttygen.exe to generate key files Add public key to ~/.ssh/autherized_keysTo move termux.pub to Android, you can host the file on a HTTP or FTP server in local network. Then download it with wget. 1wget http://192.168.1.106:8000/termux.pub # Use your own address Just append the content into ~/.ssh/autherized_keys 1cat termux.pub &gt;&gt; ~/.ssh/autherized_keys Use putty.exe to login proot1pkg install proot # Nginx needs chroot to work After installing proot, you can use command termux-chroot to enter simulated root environment. 1termux-chroot Git (optional)1pkg install git # To get code from Github Python (optional)1pkg install python2 # To build code when installing node modules clang (optional)1pkg install clang # g++ to build code redis1pkg install redis node.js1pkg install node PHP1pkg install php Nginx1pkg install nginx php-fpm1pkg install php-fpm ConfigurationUpdate /etc/nginx/nginx.confYou can get the file from nginx.conf. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; root /data/data/com.termux/files/home/firstchart/public; index index.php index.html index.htm; location / &#123; try_files $uri $uri/ /index.php?$query_string; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /data/data/com.termux/files/usr/share/nginx/html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \\.php$ &#123; #root html; try_files $uri /index.php =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; Update /etc/php-fpm.d/www.confEdit the listen address. 1listen = 127.0.0.1 You can also get the file from www.conf. node modulesAfter upload code in $HOME/firstchart, you need to install the node modules. 1234567cd $HOME/firstchartnpm install --production# orNODE_ENV=production npm install LaravelIf the code does contains vendor files, install composer and packages. composer 1234php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('sha384', 'composer-setup.php') === '93b54496392c062774670ac18b134c3b3a95e5a5e5c8f1a9f115f203b75bf9a129d5daa8ba6a13e2cc8a1da0806388a8') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"php composer-setup.phpphp -r \"unlink('composer-setup.php');\" packages 1php composer.phar install Startup scriptEdit ~/.bashrc. You can also get it from .bashrc 12345678910111213141516171819202122# bootstrapif [ \"XXX$HOME\" = \"XXX/home\" ]then uname -a # redis pgrep redis-server || (redis-server &amp;) # node cd /home/firstchart pgrep node || (node server.js &amp;) cd /home # php-fpm pgrep php-fpm || php-fpm # NGINX pgrep nginx || nginxelse # chroot if not in root environment termux-chrootfi After updating .bashrc, make it in effect. 1source ~/.bashrc Visit the app references[1] https://getcomposer.org/download/ [2] https://www.sitepoint.com/android-elephpant-laravel-android-phone/","tags":[{"name":"laravel","slug":"laravel","permalink":"http://fox000002.github.io/tags/laravel/"},{"name":"termux","slug":"termux","permalink":"http://fox000002.github.io/tags/termux/"}]},{"title":"Install Python Dash App on an Ubuntu Server","date":"2019-03-18T09:52:56.000Z","path":"2019/03/18/Install-Python-Dash-App-on-an-Ubuntu-Server/","text":"In this post, the steps to install Python Dash App on an Ubuntu Server are described. Environment Ubuntu 18.04 Apache2 WSGI Dash App https://github.com/plotly/dash-recipes/tree/master/multi-page-app Install Python &amp; Apache21234567sudo add-apt-repository ppa:deadsnakes/ppasudo apt-get install mysql-client mysql-serversudo apt-get install python3.6 python3.6-devsudo apt-get install apache2 apache2-dev Install pip3.61curl https://bootstrap.pypa.io/get-pip.py | sudo python3.6 Install mod_wsgi1sudo pip3.6 install mod_wsgi Enable WSGICreate WSGI modsudo nano /etc/apache2/mods-available/wsgi.load Add the output of command mod_wsgi-express module-config to the file. It should looks like the following two lines. 12LoadModule wsgi_module &quot;/usr/local/lib/python3.6/dist-packages/mod_wsgi/server/mod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so&quot;WSGIPythonHome &quot;/usr&quot; Enable module wsgi123sudo a2enmod wsgisudo service apache2 restart Deploy a Flask App1sudo pip3.6 install Flask 1sudo nano /etc/apache2/sites-available/FlaskApp.conf 123456789101112&lt;VirtualHost *:80&gt; ServerName yourservername ServerAdmin youremail@email.com WSGIScriptAlias / /var/www/FlaskApp/FlaskApp.wsgi &lt;Directory /var/www/FlaskApp/FlaskApp/&gt; Order allow,deny Allow from all &lt;/Directory&gt; ErrorLog $&#123;APACHE_LOG_DIR&#125;/FlaskApp-error.log LogLevel warn CustomLog $&#123;APACHE_LOG_DIR&#125;/FlaskApp-access.log combined&lt;/VirtualHost&gt; 1sudo a2ensite FlaskApp 1sudo mkdir -p /var/www/FlaskApp/FlaskApp The rest steps for deploying the Flask App are ignored here, since they are overwritten when deploying the Dash App. Check [1] for more details. Remove default enabled sitesIf default site is enable, it may show the default HTML page instead of Flask page. 1sudo a2dissite 000-default Deploy the Dash AppInstall Dash packages1234sudo pip3.6 install dash==0.30.0 # The core dash backendsudo pip3.6 install dash-html-components==0.13.2 # HTML componentssudo pip3.6 install dash-core-components==0.38.0 # Supercharged componentssudo pip3.6 install dash-table==3.1.6 # Interactive DataTable component (new!) Upload the codeUpload code files in https://github.com/plotly/dash-recipes/tree/master/multi-page-app to /var/www/FlaskApp/FlaskApp. The directory structure is as following: 123456789101112/var/www/FlaskApp├── FlaskApp│ ├── app.py│ ├── apps│ │ ├── app1.py│ │ ├── app2.py│ │ ├── __init__.py│ ├── index.py│ ├── multi-page-app.gif│ └── static│ └── base.css└── FlaskApp.wsgi Update app.pySince it run with WSGI, os.getcwd() does not work any more. Change it to absolute path and fix the parameter &lt;path&gt; syntax. If this is not corrected, files such as /static/base.css will throw 404. 1sudo nano /var/www/FlaskApp/FlaskApp/app.py 123456789101112131415161718192021import dashimport osfrom flask import send_from_directoryapp = dash.Dash()server = app.serverapp.config.supress_callback_exceptions = Trueexternal_css = [ &apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;, &apos;/static/base.css&apos;]for css in external_css: app.css.append_css(&#123;&quot;external_url&quot;: css&#125;)@app.server.route(&apos;/static/&lt;path&gt;&apos;)def static_file(path): static_folder = os.path.join(&apos;/var/www/FlaskApp/FlaskApp/&apos;, &apos;static&apos;) return send_from_directory(static_folder, path) Update FlaskApp.wsgi1sudo nano /var/www/FlaskApp/FlaskApp.wsgi 12345678#!/usr/bin/python3.6import sysimport logginglogging.basicConfig(stream=sys.stderr)sys.path.insert(0,&quot;/var/www/FlaskApp/FlaskApp/&quot;)from index import appapplication = app.server References[1] https://pythonprogramming.net/basic-flask-website-tutorial/?completed=/practical-flask-introduction/ [2] https://dash.plot.ly/installation [3] https://plot.ly/dash/deployment [4] https://help.pythonanywhere.com/pages/Flask/ [5] https://stackoverflow.com/questions/50724859/call-local-css-files-in-dash-app","tags":[{"name":"python","slug":"python","permalink":"http://fox000002.github.io/tags/python/"}]},{"title":"Electron Quick Start","date":"2018-01-06T22:41:44.000Z","path":"2018/01/06/Electron-Quick-Start/","text":"Electron is a good choice to build cross platform desktop apps with JavaScript, HTML, and CSS. In this article, I will guide you to install all necessary packages, get electron-quick-start running and create the dist package. node.jsFirst, you need install node.js. The v6.9.1 is used in my case. 12$ node --versionv6.9.1 Fetch code1git clone https://github.com/electron/electron-quick-start.git Install packages and run123cd electron-quick-startnpm installnpm start In China, the installation process may suspend due to the problem of downloading electron binary package (version 1.7.10 in my case), even with taobao registry (https://registry.npm.taobao.org) enabled. One possible workaround is fetching the package directly and put in the cache directory, so the script install.js can uncompress the package without downloading. 12cd ~/.electronwget https://npm.taobao.org/mirrors/electron/1.7.10/electron-v1.7.10-darwin-x64.zip Create the dist packageTo create the dist package, electron-packager can be used to do the dirty work. 1electron-packager electron-quick-start/ quick-start","tags":[{"name":"electron","slug":"electron","permalink":"http://fox000002.github.io/tags/electron/"}]},{"title":"About Lambda Architecture","date":"2017-03-19T00:02:58.000Z","path":"2017/03/19/About-Lambda-Architecture/","text":"Lambda architecture includes three layers: Batch layer Speed layer Serving layer The explanation from Wiki","tags":[{"name":"programming","slug":"programming","permalink":"http://fox000002.github.io/tags/programming/"}]},{"title":"Console Logging in JavaScript","date":"2016-05-14T22:53:11.000Z","path":"2016/05/14/console-logging-in-javascript/","text":"Today, I watched the 7 lesson of “Advanced Logging with the JavaScript Console“. My debugging skill with JavaScript console was enhanced a lot. Log levels12345console.log()console.warn()console.error()console.info()console.debug() Log argumentsWe can use the similar formatting in printf of C. 1console.log('Your age is %d', 5) Grouping and nestingWe group outputs by name. 12console.group(\"GroupName\");console.groupEnd(\"GroupName\"); AssertWe can make some assertions with function assert. But it does not mean the error is handled. 1console.assert(info) CountWe can count outputs with function count. 1console.count(\"name\") Timing12console.time(\"name\");console.timeEnd(\"name\"); Table1console.table(obj)","tags":[{"name":"javascript","slug":"javascript","permalink":"http://fox000002.github.io/tags/javascript/"},{"name":"logging","slug":"logging","permalink":"http://fox000002.github.io/tags/logging/"}]}]